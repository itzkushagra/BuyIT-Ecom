lazy loading- it helps in= loads the components only when the user
clicks on them. Otherwise all components will be loaded causing optimization issues.

Backend:
  npm init
  npm i -g typescript
  tsc --init
  npm i express dotenv mongoose
  npm i --save-dev @types/express @types/node typ
  npm i --save-dev nodemon
  tsc (makes the dis folder containing app.js)

Script Commands:
  "start": "node dist/app.js",   (this initiates the project)
  "build": "tsc",                (this builds the project) 
  "watch": "tsc -w"              (this makes changes simultaneously in dist\app.js when changes                                       are made in app.ts)

In the terminal of app.ts run "npm run watch", then it will show watching for file changes.
"dev": "nodemon dist/app.js" (add it in scripts)
After that open another terminal parallely and type run dev
| Now whatever changes you will make in app.ts will be reflected in the app.js |

- Validator -
npm i validator
npm i --save-dev @types/validator

- Multer -
npm i multer
npm i --save-dev @types/multer

Various Queries:
  - processOrder:
    first we get the id using req.params and then we get the order associated
    with that id using req. Upon recieving it we check if the order exists
    if not we send a new error handler. If it does we use switch statement to 
    change the status of order. Then we save and add invalidateCache

    